{"version":3,"sources":["components/CategoryDetail.js","components/Navbar.js","App.js","serviceWorker.js","index.js"],"names":["CategoryDetail","match","useState","category","setCategory","id","params","useEffect","axios","method","url","then","response","data","name","Navibar","categories","setCategories","Navbar","className","bg","variant","fixed","Brand","to","pathname","Nav","Link","NavDropdown","title","map","Item","key","fromDashboard","Form","inline","FormControl","type","placeholder","Button","App","path","exect","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"yRA2BeA,EAxBQ,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAAY,EAEDC,mBAAS,IAFR,mBAE1BC,EAF0B,KAEhBC,EAFgB,KAG5BC,EAAKJ,EAAMK,OAAOD,GAYxB,OAVAE,qBAAU,WACNC,IAAM,CACFC,OAAQ,MACRC,IAAI,iCAAD,OAAmCL,EAAnC,OAENM,MAAK,SAAAC,GACFR,EAAYQ,EAASC,WAE1B,CAACR,IAGA,6BACI,gDAAsBF,EAASE,IAC/B,yCAAeF,EAASW,QCuBrBC,EArCC,WAAO,IAAD,EAEkBb,mBAAS,IAF3B,mBAEXc,EAFW,KAECC,EAFD,KAclB,OAVAV,qBAAU,WACNC,IAAM,CACFC,OAAQ,MACRC,IAAK,wCAERC,MAAK,SAAAC,GACFK,EAAcL,EAASC,WAE5B,IAGC,kBAACK,EAAA,EAAD,CAAQC,UAAU,OAAOC,GAAG,QAAQC,QAAQ,QAAQC,MAAM,OACtD,kBAACJ,EAAA,EAAOK,MAAR,KAAc,kBAAC,IAAD,CAAMJ,UAAU,aAAaK,GAAI,CAACC,SAAU,MAA5C,iBACd,kBAACC,EAAA,EAAD,CAAKP,UAAU,WACX,kBAACO,EAAA,EAAIC,KAAL,KACI,kBAAC,IAAD,CAAMR,UAAU,aAAaK,GAAI,CAACC,SAAU,MAA5C,SAEJ,kBAACG,EAAA,EAAD,CAAaC,MAAM,aAAaxB,GAAG,sBAC9BW,EAAWc,KACZ,SAAA3B,GAAQ,OACJ,kBAACyB,EAAA,EAAYG,KAAb,KACI,kBAAC,IAAD,CAAMZ,UAAU,aAAaa,IAAK7B,EAASE,GAAImB,GAAI,CAACC,SAAS,iBAAD,OAAmBtB,EAASE,GAA5B,KAAmC4B,eAAe,IAAS9B,EAASW,YAIhJ,kBAACoB,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASnB,UAAU,YACxD,kBAACoB,EAAA,EAAD,CAAQlB,QAAQ,mBAAhB,aChBDmB,G,kBAbH,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,gBAAgBC,OAAK,EAACC,UAAW3C,QCD/B4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS9C,MACvB,2DCXN+C,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5C,MAAK,SAAA6C,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.cde6b047.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst CategoryDetail = ({ match }) => {\n\n    const [ category, setCategory] = useState([]);\n    const id = match.params.id;\n\n    useEffect(() => {\n        axios({\n            method: 'GET',\n            url: `http://localhost/api/category/${id}/`\n        })\n        .then(response => {\n            setCategory(response.data)\n        })\n    }, [id])\n\n    return (\n        <div>\n            <h2>Category with id {category.id}</h2>\n            <h4>Category: {category.name}</h4>\n        </div>\n    )\n\n}\n\nexport default CategoryDetail;\n\n","import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Navbar, Nav, NavDropdown, Form, Button, FormControl } from 'react-bootstrap';\n\nimport CategoryDetail from './CategoryDetail';\n\nconst Navibar = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    useEffect(() => {\n        axios({\n            method: \"GET\",\n            url: \"http://127.0.0.1:8000/api/category/\"\n        })\n        .then(response => {\n            setCategories(response.data);\n        });\n    }, []);\n\n    return (\n        <Navbar className=\"px-5\" bg=\"light\" variant=\"light\" fixed='top'>\n            <Navbar.Brand><Link className=\"text-reset\" to={{pathname: '/'}}>Django-React</Link></Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link>\n                    <Link className=\"text-reset\" to={{pathname: '/'}}>Home</Link>\n                </Nav.Link>\n                <NavDropdown title=\"Categories\" id=\"basic-nav-dropdown\">\n                    {categories.map(\n                    category => \n                        <NavDropdown.Item>\n                            <Link className=\"text-reset\" key={category.id} to={{pathname: `/api/category/${category.id}/`, fromDashboard: false}}>{category.name}</Link>\n                        </NavDropdown.Item>)}\n                </NavDropdown>\n            </Nav>\n            <Form inline>\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                <Button variant=\"outline-primary\">Search</Button>\n            </Form>\n        </Navbar>\n    );\n}\n\nexport default Navibar;","import React from 'react';\nimport { Container } from 'react-bootstrap';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Navibar from './components/Navbar';\nimport Cards from './components/Cards';\nimport CategoryDetail from './components/CategoryDetail';\n\n\nconst App = () =>  (\n  <BrowserRouter>\n    <Navibar />\n    <Switch>\n      <Route path=\"/category/:id\" exect component={CategoryDetail}></Route>\n    </Switch>\n    {/* <Container className=\"pt-5\" >\n      <h1 className=\"mt-2 text-center\">Hello from React!</h1>\n        <Cards />\n    </Container> */}\n  </BrowserRouter>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}