{"version":3,"sources":["components/Navbar.js","components/Cards.js","App.js","serviceWorker.js","index.js"],"names":["Navibar","useState","categories","setCategories","useEffect","axios","method","url","then","response","data","Navbar","className","bg","variant","fixed","Brand","href","Nav","Link","map","category","key","id","to","pathname","fromDashboard","name","NavDropdown","title","Form","inline","FormControl","type","placeholder","Button","Cards","blogpostost","setBlogpost","Row","md","post","Col","Card","Body","Title","Text","content","Footer","style","fontSize","blog_category","slug","pub_date","App","Container","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"0RAqCeA,EAhCC,WAAO,IAAD,EAEkBC,mBAAS,IAF3B,mBAEXC,EAFW,KAECC,EAFD,KAclB,OAVAC,qBAAU,WACNC,IAAM,CACJC,OAAQ,MACRC,IAAK,wCAENC,MAAK,SAAAC,GACFN,EAAcM,EAASC,WAE5B,IAGC,kBAACC,EAAA,EAAD,CAAQC,UAAU,OAAOC,GAAG,QAAQC,QAAQ,QAAQC,MAAM,OACtD,kBAACJ,EAAA,EAAOK,MAAR,CAAcC,KAAK,SAAnB,gBACA,kBAACC,EAAA,EAAD,CAAKN,UAAU,WACX,kBAACM,EAAA,EAAIC,KAAL,CAAUF,KAAK,SAAf,QACCf,EAAWkB,KAAI,SAAAC,GAAQ,OAAI,kBAAC,IAAD,CAAMC,IAAKD,EAASE,GAAIC,GAAI,CAACC,SAAS,aAAD,OAAeJ,EAASE,IAAMG,eAAe,IAASL,EAASM,SAChI,kBAACC,EAAA,EAAD,CAAaC,MAAM,aAAaN,GAAG,wBAIvC,kBAACO,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAAStB,UAAU,YACxD,kBAACuB,EAAA,EAAD,CAAQrB,QAAQ,mBAAhB,a,wBCGDsB,EA9BD,WAAO,IAAD,EAEiBnC,mBAAS,IAF1B,mBAEXoC,EAFW,KAEEC,EAFF,KAalB,OATAlC,qBAAU,WACRC,IAAM,CACJC,OAAQ,MACRC,IAAK,wCACJC,MAAK,SAAAC,GACN6B,EAAY7B,EAASC,WAEtB,IAGD,kBAAC6B,EAAA,EAAD,CAAKC,GAAI,GACNH,EAAYjB,KAAI,SAAAqB,GAAI,OACnB,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAM/B,UAAU,OAAOU,IAAKmB,EAAKlB,IAE7B,kBAACoB,EAAA,EAAKC,KAAN,KACI,kBAACD,EAAA,EAAKE,MAAN,KAAcJ,EAAKZ,OACnB,kBAACc,EAAA,EAAKG,KAAN,KAAaL,EAAKM,UAEtB,kBAACJ,EAAA,EAAKK,OAAN,CAAapC,UAAU,aAAaqC,MAAO,CAACC,SAAU,SAAS,uBAAGjC,KAAI,WAAMwB,EAAKU,cAAcC,OAAhC,IAA0CX,EAAKU,cAAcC,MAA5H,KAAwIX,EAAKY,SAA7I,YCRCC,EAbH,WAEV,OACE,oCACE,kBAAC,EAAD,MACA,kBAACC,EAAA,EAAD,CAAW3C,UAAU,QACnB,wBAAIA,UAAU,oBAAd,qBACA,kBAAC,EAAD,SCDY4C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5D,MAAK,SAAA6D,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.fe583901.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\nimport { Navbar, Nav, NavDropdown, Form, Button, FormControl } from 'react-bootstrap';\n\nconst Navibar = () => {\n\n    const [categories, setCategories] = useState([]);\n\n    useEffect(() => {\n        axios({\n          method: \"GET\",\n          url: \"http://127.0.0.1:8000/api/category/\"\n        })\n        .then(response => {\n            setCategories(response.data);\n        });\n    }, []);\n  \n    return (\n        <Navbar className=\"px-5\" bg=\"light\" variant=\"light\" fixed='top'>\n            <Navbar.Brand href=\"#home\">Django-React</Navbar.Brand>\n            <Nav className=\"mr-auto\">\n                <Nav.Link href=\"#home\">Home</Nav.Link>\n                {categories.map(category => <Link key={category.id} to={{pathname: `/category/${category.id}`, fromDashboard: false}}>{category.name}</Link>)}\n                <NavDropdown title=\"Categories\" id=\"basic-nav-dropdown\">\n                {/* {categories.map(category => <NavDropdown.Item key={category.id} href={`/${category.slug}`}>{category.name}</NavDropdown.Item>)} */}\n                </NavDropdown>\n            </Nav>\n            <Form inline>\n                <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n                <Button variant=\"outline-primary\">Search</Button>\n            </Form>\n        </Navbar>\n    );\n}\n\nexport default Navibar;","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Card, Col, Row } from 'react-bootstrap';\n\nconst Cards = () => {\n\n  const [blogpostost, setBlogpost] = useState([]);\n\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: \"http://127.0.0.1:8000/api/blogpost/\"\n    }).then(response => {\n      setBlogpost(response.data);\n    });\n  }, []);\n    \n  return ( \n    <Row md={3} >\n      {blogpostost.map(post => (\n        <Col>\n          <Card className=\"mb-4\" key={post.id}>\n              {/* <Card.Img variant=\"top\" src={post.image} /> */}\n              <Card.Body>\n                  <Card.Title>{ post.title }</Card.Title>\n                  <Card.Text>{ post.content }</Card.Text>\n              </Card.Body>\n              <Card.Footer className=\"text-muted\" style={{fontSize: '12px'}}><a href={`/${post.blog_category.slug}`}>#{post.blog_category.slug}</a> ({post.pub_date})</Card.Footer>\n          </Card>        \n        </Col>))}\n    </Row>\n  );\n}\n\nexport default Cards;\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nimport Navibar from './components/Navbar';\nimport Cards from './components/Cards';\n\nconst App = () =>  {\n \n  return (\n    <>\n      <Navibar />\n      <Container className=\"pt-5\" >\n        <h1 className=\"mt-2 text-center\">Hello from React!</h1>\n        <Cards />\n      </Container>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}