{"version":3,"sources":["components/Navbar.js","components/Card.js","App.js","serviceWorker.js","index.js"],"names":["navbar","Navbar","bg","variant","Brand","href","Nav","className","Link","Form","inline","FormControl","type","placeholder","Button","card","id","image","title","content","blog_category","pub_date","Card","style","width","margin","key","Img","src","Body","Title","Text","Footer","slug","App","useState","blogpostost","setBlogpost","useEffect","axios","method","url","then","response","data","Container","Row","map","post","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"6SAiBeA,EAdA,kBAAO,kBAACC,EAAA,EAAD,CAAQC,GAAG,QAAQC,QAAQ,SAC7C,kBAACF,EAAA,EAAOG,MAAR,CAAcC,KAAK,SAAnB,UACI,kBAACC,EAAA,EAAD,CAAKC,UAAU,WACX,kBAACD,EAAA,EAAIE,KAAL,CAAUH,KAAK,SAAf,QACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,aAAf,YACA,kBAACC,EAAA,EAAIE,KAAL,CAAUH,KAAK,YAAf,YAEJ,kBAACI,EAAA,EAAD,CAAMC,QAAM,GACR,kBAACC,EAAA,EAAD,CAAaC,KAAK,OAAOC,YAAY,SAASN,UAAU,YACxD,kBAACO,EAAA,EAAD,CAAQX,QAAQ,mBAAhB,a,QCEGY,EAXF,SAAC,GAAD,IAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,MAAOC,EAArB,EAAqBA,QAASC,EAA9B,EAA8BA,cAAeC,EAA7C,EAA6CA,SAA7C,OACT,kBAACC,EAAA,EAAD,CAAMC,MAAO,CAAEC,MAAO,QAASC,OAAQ,SAAWC,IAAKV,GACnD,kBAACM,EAAA,EAAKK,IAAN,CAAUxB,QAAQ,MAAMyB,IAAKX,IAC7B,kBAACK,EAAA,EAAKO,KAAN,KACI,kBAACP,EAAA,EAAKQ,MAAN,KAAcZ,GACd,kBAACI,EAAA,EAAKS,KAAN,KAAaZ,IAEjB,kBAACG,EAAA,EAAKU,OAAN,CAAazB,UAAU,cAAvB,IAAuCa,EAAca,KAArD,KAA8DZ,EAA9D,OCqBOa,EAxBH,WAAQ,IAAD,EAEkBC,mBAAS,IAF3B,mBAEVC,EAFU,KAEGC,EAFH,KAajB,OATAC,qBAAU,WACRC,IAAM,CACJC,OAAQ,MACRC,IAAK,wCACJC,MAAK,SAAAC,GACNN,EAAYM,EAASC,WAEtB,IAGD,kBAACC,EAAA,EAAD,KACE,kBAAC,EAAD,MACA,iDACA,kBAACC,EAAA,EAAD,KACGV,EAAYW,KAAI,SAAAC,GAAI,OAAI,kBAAC,EAAD,CAAMA,KAAMA,UCbzBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnB,MAAK,SAAAoB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.61e2f2bb.chunk.js","sourcesContent":["import React from 'react';\nimport { Navbar, Nav, Form, Button, FormControl } from 'react-bootstrap';\n\nconst navbar = () => (<Navbar bg=\"light\" variant=\"light\">\n    <Navbar.Brand href=\"#home\">Navbar</Navbar.Brand>\n        <Nav className=\"mr-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#features\">Features</Nav.Link>\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n        </Nav>\n        <Form inline>\n            <FormControl type=\"text\" placeholder=\"Search\" className=\"mr-sm-2\" />\n            <Button variant=\"outline-primary\">Search</Button>\n        </Form>\n    </Navbar>\n);\n\nexport default navbar;","import React from 'react';\nimport { Card } from 'react-bootstrap';\n\nconst card = ({ id, image, title, content, blog_category, pub_date }) => ( \n    <Card style={{ width: '20rem', margin: '.5rem' }} key={id}>\n        <Card.Img variant=\"top\" src={image} />\n        <Card.Body>\n            <Card.Title>{ title }</Card.Title>\n            <Card.Text>{ content }</Card.Text>\n        </Card.Body>\n        <Card.Footer className=\"text-muted\">#{ blog_category.slug } ({pub_date})</Card.Footer>\n    </Card>\n);\n\nexport default card;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { Container, Row } from 'react-bootstrap';\n\nimport Navbar from './components/Navbar';\nimport Card from './components/Card';\n\nconst App = () =>  {\n\n  const [blogpostost, setBlogpost] = useState([]);\n\n  useEffect(() => {\n    axios({\n      method: \"GET\",\n      url: \"http://127.0.0.1:8000/api/blogpost/\"\n    }).then(response => {\n      setBlogpost(response.data);\n    });\n  }, []);\n\n  return (\n    <Container >\n      <Navbar />\n      <h1>Hello from React!</h1>\n      <Row>\n        {blogpostost.map(post => <Card post={post} />)}\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}